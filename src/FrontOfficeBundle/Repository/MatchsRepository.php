<?php

namespace FrontOfficeBundle\Repository;

/**
 * MatchsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchsRepository extends \Doctrine\ORM\EntityRepository
{
    public function getMatchAvenirEquipe($equipe){
        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder->innerJoin('FrontOfficeBundle:Equipe','e','with','m.equipeDomicile = e.id OR m.equipeExterieur = e.id')
            ->where('m.scoreDomicile IS NULL 
                              AND m.scoreExterieur IS NULL 
                              AND e.nom = :equipe
                              order by m.date ASC')
            ->setParameter(':equipe',$equipe)
            ->setMaxResults(5);
        $query=$queryBuilder->getQuery();

        return $query->getResult();
    }

    public function getMatchJournee($journee){
        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder->where('m.journee = :journee order by m.date ASC')
                     ->setParameter('journee',$journee);
        $query=$queryBuilder->getQuery();

        return $query->getResult();
    }

    public function getMatchID($id){
        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder->where('m.id=:id')
                     ->setParameter('id',$id);
        $query = $queryBuilder->getQuery();

        return $query->getResult();
    }

    public function getDernierScoreSaisie(){
        $queryBuilder = $this->createQueryBuilder('m');
        $queryBuilder->where('m.scoreDomicile is not null AND m.scoreExterieur is not null order by m.date desc')
            ->setMaxResults(1);
        $query=$queryBuilder->getQuery();

        return $query->getResult();
    }

    public function getMatchByFormFindMatchByChampionnatJournee($championnat,$journee,$filtre){

        if($filtre==0) {
            $queryBuilder = $this->createQueryBuilder('m');
            $queryBuilder->innerJoin("m.journee", "j")
                ->andWhere("j.id = :journee")
                ->setParameter("journee", $journee);
            $query = $queryBuilder->getQuery();

            return $query->getResult();
        }else{
            $queryBuilder = $this->createQueryBuilder('m');
            $queryBuilder->innerJoin("m.journee", "j")
                ->andWhere("j.id = :journee")
                ->andWhere("m.date < CURRENT_DATE()")
                ->andWhere("m.scoreDomicile is null and m.scoreExterieur is null")
                ->setParameter("journee", $journee);
            $query = $queryBuilder->getQuery();

            return $query->getResult();
        }
    }
}
